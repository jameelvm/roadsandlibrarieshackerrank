//sample cities input
var cities = [
    [1, 2],
    [1, 3],

]
//findMinimumCost(3, 2, 2, 3, cities);

//n - no of cities
//m - edges of graph(road)
//c_lib - cost to build one library
//c_road - cost to repair one road 
//cities - 2D array from one city to another
function findMinimumCost(n, m, c_lib, c_road, cities) {
    var ans = 0;
    var graph = getAdjacencyList(cities, m, n);
    var visitedCities = {};
    for (var i = 1; i <= n; i++) {
        if (!visitedCities[i]) {

            var clusterSize = dfs(i, graph, visitedCities, 1);
            ans = ans + c_lib;
            if (c_lib > c_road) {
                ans = ans + ((clusterSize - 1) * c_road);
            } else {
                ans = ans + ((clusterSize - 1) * c_lib);
            }
        }
    }
    return ans;
}

function dfs(root, graph, visitedCities, count) {

    //to find 
    visitedCities[root] = "Visited";
    var neighbors = graph[root];
    if (neighbors) {
        for (var i = 0; i < neighbors.length; i++) {
            if (!visitedCities[neighbors[i]]) {
                count = 1 + dfs(neighbors[i], graph, visitedCities, count);
            }
        }
    }
    return count;
}

function getAdjacencyList(cities, m, n) {

    //this method will create adjacency list
    var graph = {}
    for (var node = 1; node <= n; node++) {
        graph[node] = [];
    }

    for (var i = 0; i < m; i++) {
        var city = cities[i];
        var vertex = city[0];
        var edge = city[1];
        graph[vertex].push(edge);
        graph[edge].push(vertex);
    }
    return graph;
}
